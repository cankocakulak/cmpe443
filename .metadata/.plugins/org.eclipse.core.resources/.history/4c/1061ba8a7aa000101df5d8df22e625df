/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#define wait_millisecond 1000
uint32_t wait_counter = 0;
int main(void)
{
// Turn on the GPIO ports.
*((uint32_t *) (0x40021000 + 0x4C)) |= 0x07;
// To access the Red Light.
*((uint32_t *) (0x42020000 + 0x00)) &= ~(0x03 << (9 * 2));
*((uint32_t *) (0x42020000 + 0x00)) |= (0x01 << (9 * 2));
// To access the Blue Light.
*((uint32_t *) (0x42020400 + 0x00)) &= ~(0x03 << (7 * 2));
*((uint32_t *) (0x42020400 + 0x00)) |= (0x01 << (7 * 2));
// To access the Yellow Light.
*((uint32_t *) (0x42020800 + 0x00)) &= ~(0x03 << (7 * 2));
*((uint32_t *) (0x42020800 + 0x00)) |= (0x01 << (7 * 2));
while(1) {
int index;
// Turn on the Red Light.
*((uint32_t *) (0x42020000 + 0x14)) |= (0x01 << 9);
// Turn on the Blue Light.
*((uint32_t *) (0x42020400 + 0x14)) |= (0x01 << 7);
// Turn on the Yellow Light.
*((uint32_t *) (0x42020800 + 0x14)) |= (0x01 << 7);
// Useless loop to make time for the human eye.
for (index = 0; index < wait_millisecond * 333; index ++) {
wait_counter = wait_counter + 1;
}
// Turn off the Red Light.
*((uint32_t *) (0x42020000 + 0x14)) &= ~(0x01 << 9);
// Turn off the Blue Light.
*((uint32_t *) (0x42020400 + 0x14)) &= ~(0x01 << 7);
// Turn off the Yellow Light.
*((uint32_t *) (0x42020800 + 0x14)) &= ~(0x01 << 7);
// Useless loop to make time for the human eye.
for (index = 0; index < wait_millisecond * 333; index ++) {
wait_counter = wait_counter + 1;
}
