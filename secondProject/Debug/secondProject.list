
secondProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000210  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000408  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000408  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002ae  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000017e  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00001870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000070  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001023  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000099b  00000000  00000000  000029ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003da5  00000000  00000000  00003346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000070eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000184  00000000  00000000  00007130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000072b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	080003e8 	.word	0x080003e8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	080003e8 	.word	0x080003e8

08000230 <breadboard_delay>:

// GPIO base address for Port A
#define GPIOA_BASE      0x42020000

// Simple delay function
void breadboard_delay(uint32_t count) {
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < count * 333; i++) {
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e002      	b.n	8000244 <breadboard_delay+0x14>
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3301      	adds	r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f240 124d 	movw	r2, #333	@ 0x14d
 800024a:	fb02 f303 	mul.w	r3, r2, r3
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	429a      	cmp	r2, r3
 8000252:	d3f4      	bcc.n	800023e <breadboard_delay+0xe>
        // Just wait
    }
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
	...

08000264 <led_init>:

// Initialize PA0 with proper configuration for A0 connector
void led_init(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    *((uint32_t *) (0x40021000 + 0x4C)) |= 0x01;  // Enable GPIOA
 8000268:	4b17      	ldr	r3, [pc, #92]	@ (80002c8 <led_init+0x64>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a16      	ldr	r2, [pc, #88]	@ (80002c8 <led_init+0x64>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]
    
    // Configure PA0 as digital output (override analog function)
    *((uint32_t *) (GPIOA_BASE + 0x00)) &= ~(0x03 << (LED_PIN * 2));
 8000274:	4b15      	ldr	r3, [pc, #84]	@ (80002cc <led_init+0x68>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a14      	ldr	r2, [pc, #80]	@ (80002cc <led_init+0x68>)
 800027a:	f023 0303 	bic.w	r3, r3, #3
 800027e:	6013      	str	r3, [r2, #0]
    *((uint32_t *) (GPIOA_BASE + 0x00)) |= (0x01 << (LED_PIN * 2));
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <led_init+0x68>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a11      	ldr	r2, [pc, #68]	@ (80002cc <led_init+0x68>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
    
    // Set as push-pull output (strong drive)
    *((uint32_t *) (GPIOA_BASE + 0x04)) &= ~(0x01 << LED_PIN);
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <led_init+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0f      	ldr	r2, [pc, #60]	@ (80002d0 <led_init+0x6c>)
 8000292:	f023 0301 	bic.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
    
    // Set speed to medium
    *((uint32_t *) (GPIOA_BASE + 0x08)) &= ~(0x03 << (LED_PIN * 2));
 8000298:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <led_init+0x70>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a0d      	ldr	r2, [pc, #52]	@ (80002d4 <led_init+0x70>)
 800029e:	f023 0303 	bic.w	r3, r3, #3
 80002a2:	6013      	str	r3, [r2, #0]
    *((uint32_t *) (GPIOA_BASE + 0x08)) |= (0x01 << (LED_PIN * 2));
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <led_init+0x70>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <led_init+0x70>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
    
    // No pull-up/pull-down
    *((uint32_t *) (GPIOA_BASE + 0x0C)) &= ~(0x03 << (LED_PIN * 2));
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <led_init+0x74>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	@ (80002d8 <led_init+0x74>)
 80002b6:	f023 0303 	bic.w	r3, r3, #3
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	4002104c 	.word	0x4002104c
 80002cc:	42020000 	.word	0x42020000
 80002d0:	42020004 	.word	0x42020004
 80002d4:	42020008 	.word	0x42020008
 80002d8:	4202000c 	.word	0x4202000c

080002dc <led_on>:

// Turn LED on
void led_on(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
    *((uint32_t *) (GPIOA_BASE + 0x14)) |= (0x01 << LED_PIN);
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <led_on+0x1c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <led_on+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6013      	str	r3, [r2, #0]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	42020014 	.word	0x42020014

080002fc <led_off>:

// Turn LED off
void led_off(void) {
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    *((uint32_t *) (GPIOA_BASE + 0x14)) &= ~(0x01 << LED_PIN);
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <led_off+0x1c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <led_off+0x1c>)
 8000306:	f023 0301 	bic.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	42020014 	.word	0x42020014

0800031c <fast_blink>:
    }
}


// Experiment 2: Fast blink
void fast_blink(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
    led_init();
 8000320:	f7ff ffa0 	bl	8000264 <led_init>
    
    while(1) {
        led_on();
 8000324:	f7ff ffda 	bl	80002dc <led_on>
        breadboard_delay(200);
 8000328:	20c8      	movs	r0, #200	@ 0xc8
 800032a:	f7ff ff81 	bl	8000230 <breadboard_delay>
        led_off();
 800032e:	f7ff ffe5 	bl	80002fc <led_off>
        breadboard_delay(200);
 8000332:	20c8      	movs	r0, #200	@ 0xc8
 8000334:	f7ff ff7c 	bl	8000230 <breadboard_delay>
        led_on();
 8000338:	bf00      	nop
 800033a:	e7f3      	b.n	8000324 <fast_blink+0x8>

0800033c <main>:

#define wait_millisecond 1000
uint32_t wait_counter = 0;

int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
    // simple_blink();          // Simple on/off blinking (now 3 sec on/off)
   // led_always_on();         // LED always on (for testing PA0 connection)
    // super_slow_blink();      // Very slow blink (10 sec on/off)
    //

	fast_blink();            // Fast blinking
 8000340:	f7ff ffec 	bl	800031c <fast_blink>
    // sos_pattern();           // SOS morse code pattern
    
    return 0;
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800037e:	f7ff ffdd 	bl	800033c <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC1_2_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	@ (80003d8 <__libc_init_array+0x38>)
 80003a4:	2600      	movs	r6, #0
 80003a6:	4c0d      	ldr	r4, [pc, #52]	@ (80003dc <__libc_init_array+0x3c>)
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	@ (80003e0 <__libc_init_array+0x40>)
 80003b2:	2600      	movs	r6, #0
 80003b4:	4c0b      	ldr	r4, [pc, #44]	@ (80003e4 <__libc_init_array+0x44>)
 80003b6:	f000 f817 	bl	80003e8 <_init>
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	3601      	adds	r6, #1
 80003ca:	4798      	blx	r3
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	3601      	adds	r6, #1
 80003d4:	4798      	blx	r3
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
